const crypto = require("crypto");
const admin = require("firebase-admin");
function verify(signatureKey, notificationUrl, body, header){ try{ const hmac = crypto.createHmac('sha256', signatureKey); hmac.update(notificationUrl + body); const comp = hmac.digest('base64'); return crypto.timingSafeEqual(Buffer.from(comp), Buffer.from(header)); }catch(e){ return false; } }
let inited=false; function init(){ if(inited) return; const b64 = process.env.FIREBASE_SERVICE_ACCOUNT_BASE64||""; if(!b64) throw new Error("Missing FIREBASE_SERVICE_ACCOUNT_BASE64"); const svc = JSON.parse(Buffer.from(b64,"base64").toString("utf8")); admin.initializeApp({ credential: admin.credential.cert(svc) }); inited=true; }
exports.handler = async function(event){ try{ const body = event.body||''; const sig = event.headers['x-square-hmacsha256-signature'] || event.headers['X-Square-HmacSha256-Signature'] || ''; const sigKey = process.env.SQUARE_WEBHOOK_SIGNATURE_KEY || ''; const notificationUrl = (process.env.SITE_URL||'') + '/.netlify/functions/squareWebhook'; if(!verify(sigKey, notificationUrl, body, sig)){ console.warn('invalid sig'); return { statusCode:401, body:'invalid' }; } init(); const payload = JSON.parse(body); const obj = (payload.data && payload.data.object) || {}; const payment = obj.payment || obj; if(!payment) return { statusCode:200, body:'no payment' }; const status = (payment.status||'').toUpperCase(); if(status!=='COMPLETED' && status!=='CAPTURED') return { statusCode:200, body:'ignored' }; const ref = payment.reference_id || payment.order_id || payment.id; const db = require('firebase-admin').firestore(); // mark provider subscribed if provider doc exists\n const provRef = db.collection('providers').doc(ref); const provSnap = await provRef.get(); if(provSnap.exists){ await provRef.update({ subscribed:true, paid:true, paidAt: admin.firestore.FieldValue.serverTimestamp(), paymentInfo: payment }); return { statusCode:200, body:'ok' }; } const clientRef = db.collection('clients').doc(ref); const clientSnap = await clientRef.get(); if(clientSnap.exists){ await clientRef.update({ paid:true, paidAt: admin.firestore.FieldValue.serverTimestamp(), paymentInfo: payment }); return { statusCode:200, body:'ok' }; } return { statusCode:200, body:'no match' }; }catch(e){ console.error(e); return { statusCode:500, body:'error' }; } };